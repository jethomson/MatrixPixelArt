<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no" />
  <meta http-equiv="Cache-Control" content="private, no-store" />
  <title>Compositor</title>
  <style>
  html {
    touch-action: manipulation;
    overflow: auto;
  }

  body {
    font-family: Arial, sans-serif;
    color: #faffff;
    background: #111;
    font-size: 17px;
    text-align: center;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
  }

  #return_main_menu {
    float: left;
  }
  
  #main_div {
    max-width: 1400px;
    margin: auto;
  }

  .grid-container {
    display: grid;
    grid-template-columns: repeat(9, minmax(20px, 120px)); /*fixes select element overflow grid width problem in chrome*/
    grid-column-gap: 2vw;
    grid-auto-rows: 1fr;
    grid-row-gap: 5px;
    width: 1000px;
    max-width: 95vw;
    justify-content: center;
    margin: 5px auto;
    padding: 5px;
    border-style: solid;
  }

  .item-a {
    grid-column-start: 1;
  }
  /* this allows children element of section to be displayed as if they were direct children of the div grid */
  section {
    display: contents;
  }

  #button-container {
    display: flex;
    padding-bottom: 10px;
    padding-top: 10px;
    max-width: 600px;
    margin: 5px auto;
  }
  .buttonclass {
    flex:1;
    padding-top:5px;
    padding-bottom:5px;
  }

  input#cmid{
    flex-grow: 1;
    padding-top: 5px;
    padding-bottom: 5px;
    background: #222;
    border: 1px solid #333;
    padding-inline: 5px;
    max-width: 225px;
    border-radius: 7px;
    font-family: Arial,sans-serif;
    font-size: 15px;
    color: #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .gap {
    width:10px;
  }

  button {
    background: #222;
    border: 1px solid #333;
    padding-inline: 5px;
    width: 100%;
    border-radius: 24px;
    font-family: Arial, sans-serif;
    font-size: 1em;
    color: #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor:pointer;
  }
  /*
  button:hover,
  input[type="button"]:hover {
    background: #0e70a4;
  }
  */

  .buttonclass {
    flex: 1;
    padding-top: 5px;
    padding-bottom: 5px;
  }

  .svg-icon {
    vertical-align: middle;
  }

  .header {
    text-align: center;
  }

  input[type="color"] {
    margin: auto;
  }

  </style>
</head>
<body>
  <a id="return_main_menu" href="index.htm">
    <svg height="24px" width="24px" viewBox="0 0 16 16" id="Layer_1">
      <path fill="white" d="M15.45,7L14,5.551V2c0-0.55-0.45-1-1-1h-1c-0.55,0-1,0.45-1,1v0.553L9,0.555C8.727,0.297,8.477,0,8,0S7.273,0.297,7,0.555  L0.55,7C0.238,7.325,0,7.562,0,8c0,0.563,0.432,1,1,1h1v6c0,0.55,0.45,1,1,1h3v-5c0-0.55,0.45-1,1-1h2c0.55,0,1,0.45,1,1v5h3  c0.55,0,1-0.45,1-1V9h1c0.568,0,1-0.437,1-1C16,7.562,15.762,7.325,15.45,7z"/>
    </svg>
  </a>
  <h3>Combine images and other effects using layers to make composites.</h3>

  <div id="main_div">
    <div id="button-container">
      <input type="text" id="cmid" maxlength=26 placeholder="Enter filename here." value="" autocomplete="off" />
      <div id="gap1" class="gap"></div>
      <button id="btn_save" class="buttonclass" onclick="save()"><svg class="svg-icon" style="width:36px;height:36px" viewBox="0 -960 960 960"> <path id="saveSvg" fill="currentColor" d="M440-320v-326L336-542l-56-58 200-200 200 200-56 58-104-104v326h-80ZM240-160q-33 0-56.5-23.5T160-240v-120h80v120h480v-120h80v120q0 33-23.5 56.5T720-160H240Z"/></svg>&nbsp; Save</button>
    </div>
    <div id="layer_container" class="grid-container">
        <section>
            <label class="item-a">Layer</label>
            <label>Effect</label>
            <label>Accent</label>
            <label>Dynamic Color 1</label>
            <label>Dynamic Color 2</label>
            <label>Fixed Color</label>
            <label>Color Chooser</label>
            <label>Movement</label>
            <label>Text</label>
        </section>
    </div>
    <!--div id="main_button" class="grid-item">
      <a href="./"><button name="">Main Menu</button></a>
    </div-->
  </div>

<script src="js/template_variables.js"></script>
<script>
base_url = "";
if (window.location.protocol == "file:") {
  // makes for easier debugging.
  // if html is loaded locally, can see the results of editing more easily.
  // otherwise every change to html would require uploading new version to microcontroller.
  base_url = "http://pixelart.local";
}


function enable_disable_color_input(dradio, id) {
  let el = document.getElementById(id);
  if (el) {
    if (dradio.checked && dradio.value == 2) {
      //el.style.display = "none";
      el.disabled = false;
    }
    else {
      //el.style.display = "";
      el.disabled = true;
    }
  }
}


function enable_disable_settings(el_select) {
  let opt = el_select.options[el_select.selectedIndex];
  let type = "e"; // need to set to e in order to disable all settings when empty layer is chosen.
  if (opt.parentElement.tagName === "OPTGROUP") {
    type = opt.parentElement.id;
  }

  let id = el_select.id;
  let els = document.querySelectorAll(`[id^="${id}"][data-setting-for]`);
  for (el of els) {
    //let dnew = "none";
    let dnew = true;
    let enabled_for_types = el.getAttribute("data-setting-for").split(",");
    if (enabled_for_types.includes(type)) {
      //dnew = "";
      dnew = false;
      // since the radio buttons enable/disable color picker its state should remain unchanged here
      if (el.getAttribute("data-key") === "c") {
        dnew = el.disabled;
      }
    }
    else {
      // set to defaults - maybe should create a function for this that can be called on page load
      if (el.getAttribute("data-key") == "a") {
        el.selectedIndex = 0;
        el.disabled = false;
      }

      if (el.getAttribute("data-key") == "ct") {
        el.checked = (el.value == 0) ? true : false;
      }
      if (el.type == "color") {
        el.value = "#3584e4";
      }
      el.selected = false;
      if (el.type == "text") {
        el.value = "";
      }
    }
    //el.style.display = dnew;
    el.disabled = dnew;
  }
}


function populate_effects(list) {
  let files = list["files"];
  if (files) {
    let el_selects = document.querySelectorAll('select[data-key="id"]');
    for (el_select of el_selects) {
      el_select.insertAdjacentHTML("beforeend", '<optgroup id="im" label="Images">');
    }

    for (let i = 0; i < files.length; i++) {
      let type = files[i]["t"];
      let id = files[i]["id"];
      if (type === "im" && id) { 
        let el_optgroups = document.querySelectorAll('optgroup[id="im"]');
        for (el_optgroup of el_optgroups) {
          el_optgroup.insertAdjacentHTML("beforeend", `<option value="${id}">${id}</option>`);
        }
      }
    }
  }

  let patterns = list["patterns"];
  if (patterns) {
    let el_selects = document.querySelectorAll('select[data-key="id"]');
    for (el_select of el_selects) {
      el_select.insertAdjacentHTML("beforeend", '<optgroup id="p" label="Patterns">');
    }

    for (let i = 0; i < patterns.length; i++) {
      let id = patterns[i].id;
      let name = patterns[i].name;
      let el_optgroups = document.querySelectorAll('optgroup[id="p"]');
      for (el_optgroup of el_optgroups) {
        el_optgroup.insertAdjacentHTML("beforeend", `<option value="${id}">${name}</option>`);
      }
    }
  }

  let accents = list["accents"];
  if (accents) {
    for (let i = 0; i < accents.length; i++) {
      let id = accents[i].id;
      let name = accents[i].name;
      let el_selects = document.querySelectorAll('select[data-key="a"]');
      for (el_select of el_selects) {
        el_select.insertAdjacentHTML("beforeend", `<option value="${id}">${name}</option>`);
      }
    }
  }

  let texts = ["Enter Text"];
  if (texts) {
    let el_selects = document.querySelectorAll('select[data-key="id"]');
    for (el_select of el_selects) {
      el_select.insertAdjacentHTML("beforeend", '<optgroup id="t" label="Text">');
    }
  
    for (let i = 0; i < texts.length; i++) {
      let id = i;
      let name = texts[i];
      let el_optgroups = document.querySelectorAll('optgroup[id="t"]');
      for (el_optgroup of el_optgroups) {
        el_optgroup.insertAdjacentHTML("beforeend", `<option value="${id}">${name}</option>`);
      }
    }
  }

  let info = ["Time (12 hour)", "Time (24 hour)", "Date (MM/DD)", "Date (DD/MM)", "Time (12 hour) & Date (MM/DD)", "Time (24 hour) & Date (DD/MM)"];
  if (info) {
    let el_selects = document.querySelectorAll('select[data-key="id"]');
    for (el_select of el_selects) {
      el_select.insertAdjacentHTML("beforeend", '<optgroup id="n" label="Info">');
    }
  
    for (let i = 0; i < info.length; i++) {
      let id = i;
      let name = info[i];
      let el_optgroups = document.querySelectorAll('optgroup[id="n"]');
      for (el_optgroup of el_optgroups) {
        el_optgroup.insertAdjacentHTML("beforeend", `<option value="${id}">${name}</option>`);
      }
    }
  }
}


/*
function upload_status(json) {
  if (json["upload_status"] == 0) {
    //console.log("File uploaded successfully.");
    document.getElementById("btn_save").textContent = "Update Successful!";
  }
  else {
    //console.log("File upload failed.");
    document.getElementById("btn_save").textContent = "Update Failed :(";
  }
}
*/


async function save() {
  let comp_dict = {};
  let type = "cm";
  let cmid = encodeURIComponent(document.getElementById("cmid").value); // composite file names can have special characters, so need to encode them.

  comp_dict["t"] = type;
  comp_dict["l"] = [];

  if (cmid) {
    let layers = document.querySelectorAll("section[data-layer]");
    for (let i = layers.length-1; i >= 0; i--) {
      let layer = layers[i];
      let el_keys = layer.querySelectorAll("[data-key]");
      let ltype = "e";
      let lobj = {};
      lobj["t"] = ltype; // default: e indicates the layer is empty
      let save_color = false;
      for (let j = 0; j < el_keys.length; j++) {
        let el_key = el_keys[j];

        let key = el_key.getAttribute("data-key");
        let value;
        if (key === "id") {
          let opt = el_key.options[el_key.selectedIndex];
          if (opt.parentElement.tagName === "OPTGROUP") {
            ltype = opt.parentElement.id;
          }
          if (ltype !== "e") {
            value = encodeURIComponent(opt.value); // layer id. images can have special characters in file name, so need to encode them.
          }
        }

        if (key === "a") {
          let opt = el_key.options[el_key.selectedIndex];
          if (ltype !== "e") {
            value = opt.value;
          }
        }

        // move
        if ((ltype === "im" || ltype === "p" || ltype === "a" || ltype === "n") && key === "m") {
        //if (ltype !== "e" && key === "m") {
          let opt = el_key.options[el_key.selectedIndex];
          value = opt.value;
        }

        if (ltype !== "e" && key === "ct") {
          value = null;
          if (el_key.checked === true) {
            value = el_key.value;
          }
          if (value == 2) {
            save_color = true;
          }
        }

        //stringify() wraps numbers in quotes so wrap numbers in !! to make it easy to remove the quotes.
        //any number that you want to represented as a number in json should have the value set above here. 
        if (value && !isNaN(value)) {
          value = "!!"+value+"!!";
        }

        // color
        if (ltype !== "e" && key === "c" && save_color) {
          // convert to C format hex. keep below the !! wrap because we want to keep this as a string. 
          value = el_key.value.replace("#", "0x");
        }

        // writing
        if (ltype === "t" && key === "w") {
          value = encodeURIComponent(el_key.value); // text can have special characters, so need to encode them.
        }

        if (value) {
          lobj[key] = value;
        }
      }
      lobj["t"] = ltype;
      comp_dict["l"].push(lobj);
    }
    let json = JSON.stringify(comp_dict);
    const regex = /"!!(-?[0-9]+\.{0,1}[0-9]*)!!"/g 
    json = json.replace(regex, '$1')

    console.log(`t=${type}&id=${cmid}&json=` + json);

    let success = false;
    try {
      const t = await fetch(base_url+"/save", {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        },
        body: `t=${type}&id=${cmid}&json=` + json
      }),
      reply = await t.json();
      console.log(reply);
      success = true;
    }
    catch(e) {
      console.error(e);
      success = false;
    }

    let sb = document.getElementById("saveSvg");
    if (success) {
      sb.setAttribute("fill", "#056b0a");
      setTimeout(function(){sb.setAttribute("fill", "#eee")}, 1000);
    }
    else {
      sb.setAttribute("fill", "#6b050c");
      setTimeout(function(){sb.setAttribute("fill", "#777")}, 1000);
    }

  }
}


async function fetch_options() {
  const t = await fetch(base_url+"/options.json");
  let reply = await t.json();
  //let reply = JSON.parse('{"files":[{"type":"file","path":"/files/im/blinky.json","name":"blinky"},{"type":"file","path":"/files/im/inky.json","name":"inky"},{"type":"file","path":"/files/im/pinky.json","name":"pinky"},{"type":"file","path":"/files/im/clyde.json","name":"clyde"}],"patterns":[{"id":0,"name":"Rainbow"},{"id":1,"name":"Solid"},{"id":2,"name":"Riffle"},{"id":3,"name":"Puck-Man"}],"accents":[{"id":0,"name":"None"},{"id":1,"name":"Breathing"},{"id":2,"name":"Flicker"},{"id":3,"name":"Frozen Decay"}]}');
  populate_effects(reply);
}


function create_layers_ui() {
  let num_layers;
  // t_num_layers is defined in a separate file so it can be run through the webserver's template processor
  // gzipped html cannot be run through the template processor, so it is necessary for t_num_layers to be separate
  if (t_num_layers.replaceAll("~", "") === "NUM_LAYERS") {
    t_num_layers = "6";
  }
  num_layers = parseInt(t_num_layers);
  let layer_container = document.getElementById("layer_container");
  while (num_layers) {
    num_layers--;
    let layer = `
<section data-layer="l${num_layers}">
    <label class="item-a">${num_layers}</label>
    <select id="l${num_layers}" data-key="id" onchange="enable_disable_settings(this)">
      <option value="0">Empty</option>
    </select>
    <select id="l${num_layers}a" data-setting-for="im,p,t,n" data-key="a" autocomplete="off" disabled >
    </select>
    <input type="radio" id="l${num_layers}rdc" name="l${num_layers}cc" data-setting-for="im,p,t,n" data-key="ct" value="0" autocomplete="off" onchange="enable_disable_color_input(this, 'l${num_layers}c')" disabled checked />
    <input type="radio" id="l${num_layers}rcdc" name="l${num_layers}cc" data-setting-for="im,p,t,n" data-key="ct" value="1" autocomplete="off" onchange="enable_disable_color_input(this, 'l${num_layers}c')" disabled />
    <input type="radio" id="l${num_layers}rfc" name="l${num_layers}cc" data-setting-for="im,p,t,n" data-key="ct" value="2" autocomplete="off" onchange="enable_disable_color_input(this, 'l${num_layers}c')" disabled />
    <input type="color" id="l${num_layers}c" data-key="c" data-setting-for="im,p,t,n" autocomplete="off" value="#3584e4" disabled />
    <select id="l${num_layers}m" data-setting-for="im,p,a,n" data-key="m" autocomplete="off" disabled />
      <option value="0">Still</option>
      <option value="1">↑</option>
      <option value="2">↗</option>
      <option value="3">→</option>
      <option value="4">↘</option>
      <option value="5">↓</option>
      <option value="6">↙</option>
      <option value="7">←</option>
      <option value="8">↖</option>
    </select>
    <input type="text" id="l${num_layers}t" data-setting-for="t" data-key="w" autocomplete="off" disabled />
</section>`;
    layer_container.insertAdjacentHTML("beforeend", layer);
  }
}

function run() {
  create_layers_ui();
  fetch_options();
}

// trigger onchange for dynamic color radio so previous or default selection takes effect
let els = document.querySelectorAll('input[type="radio"][data-key="ct"]');
for (el of els) {
  el.dispatchEvent(new Event("change"));
}

window.addEventListener("load", run);

</script>

</body>
</html>
