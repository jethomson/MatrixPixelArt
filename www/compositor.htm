<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no" />
  <meta http-equiv="Cache-Control" content="private, no-store" />
  <title>Compositor</title>
  <style>
  html {
    touch-action: manipulation;
    overflow: auto;
  }

  body {
    font-family: Arial, sans-serif;
    color: #faffff;
    background: #111;
    font-size: 17px;
    text-align: center;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
  }

  #return_main_menu {
    float: left;
  }
  
  #main_div {
    max-width: 1400px;
    margin: auto;
  }

  .grid-container {
    display: grid;
    /*grid-template-columns: repeat(6, minmax(20px, 170px));*/ /*fixes select element overflow grid width problem in chrome*/
    grid-template-columns: repeat(6, auto);
    grid-column-gap: 2vw;
    grid-auto-rows: 1fr;
    grid-row-gap: 5px;
    /*width: 1000px;*/
    max-width: 95vw;
    justify-content: center;
    margin: 5px auto;
    padding: 5px;
    border-style: solid;
  }

  .item-a {
    grid-column-start: 1;
  }
  /* this allows children element of section to be displayed as if they were direct children of the div grid */
  section {
    display: contents;
  }

  #button-container {
    display: flex;
    padding-bottom: 10px;
    padding-top: 10px;
    max-width: 600px;
    margin: 5px auto;
  }
  .buttonclass {
    flex:1;
    padding-top:5px;
    padding-bottom:5px;
  }

  select#cm_list,
  input#cm_id {
    flex-grow: 1;
    padding-top: 5px;
    padding-bottom: 5px;
    background: #222;
    border: 1px solid #333;
    padding-inline: 5px;
    max-width: 225px;
    border-radius: 7px;
    font-family: Arial,sans-serif;
    font-size: 15px;
    color: #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .gap {
    width:10px;
  }

  button {
    background: #222;
    border: 1px solid #333;
    padding-inline: 5px;
    width: 100%;
    border-radius: 24px;
    font-family: Arial, sans-serif;
    font-size: 1em;
    color: #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor:pointer;
  }
  /*
  button:hover,
  input[type="button"]:hover {
    background: #0e70a4;
  }
  */

  .buttonclass {
    flex: 1;
    padding-top: 5px;
    padding-bottom: 5px;
  }

  .svg-icon {
    vertical-align: middle;
  }

  .header {
    text-align: center;
  }

  input[type="color"] {
    margin: auto;
  }

  </style>
</head>
<body>
  <a id="return_main_menu" href="index.htm">
    <svg height="24px" width="24px" viewBox="0 0 16 16" id="Layer_1">
      <path fill="white" d="M15.45,7L14,5.551V2c0-0.55-0.45-1-1-1h-1c-0.55,0-1,0.45-1,1v0.553L9,0.555C8.727,0.297,8.477,0,8,0S7.273,0.297,7,0.555  L0.55,7C0.238,7.325,0,7.562,0,8c0,0.563,0.432,1,1,1h1v6c0,0.55,0.45,1,1,1h3v-5c0-0.55,0.45-1,1-1h2c0.55,0,1,0.45,1,1v5h3  c0.55,0,1-0.45,1-1V9h1c0.568,0,1-0.437,1-1C16,7.562,15.762,7.325,15.45,7z"/>
    </svg>
  </a>
  <h3>Combine images and other effects using layers to make composites.</h3>

  <div id="main_div">
    <div id="button-container">
      <select id="cm_list" onchange="load_composite(this)" autocomplete="off">
        <option disabled selected value> -- load composite -- </option>
      </select>
      <div class="gap"></div>
      <input type="text" id="cm_id" onkeyup="(function(key){if(key === 'Enter'){save();}})(event.key);" maxlength=26 placeholder="Enter filename here." value="" autocomplete="off" />
      <div class="gap"></div>
      <button id="btn_save" class="buttonclass" onclick="save()"><svg class="svg-icon" style="width:36px;height:36px" viewBox="0 -960 960 960"> <path id="saveSvg" fill="currentColor" d="M440-320v-326L336-542l-56-58 200-200 200 200-56 58-104-104v326h-80ZM240-160q-33 0-56.5-23.5T160-240v-120h80v120h480v-120h80v120q0 33-23.5 56.5T720-160H240Z"/></svg> &nbsp; <span id="btn_save_text">Save</span> </button>
    </div>
    <div id="layers_container" class="grid-container">
        <section id="title_row">
            <label class="item-a">Reorder</label>
            <label>Effect</label>
            <label>Accent</label>
            <label>Color Chooser</label>
            <label>Movement</label>
            <label>Text</label>
        </section>
    </div>
  </div>

<script src="js/template_variables.js"></script>
<script>
// minifier code breaks code when some escape sequences (e.g. backslash n) are used
const newline_char = String.fromCharCode(10);
const return_char = String.fromCharCode(13);
//const tab_char = String.fromCharCode(9)

base_url = "";
if (window.location.protocol == "file:") {
  // makes for easier debugging.
  // if html is loaded locally, can see the results of editing more easily.
  // otherwise every change to html would require uploading new version to microcontroller.
  base_url = "http://pixelart.local";
}


async function save() {
  let comp_dict = {};
  let type = "cm";
  let cm_id = encodeURIComponent(document.getElementById("cm_id").value); // composite file names can have special characters, so need to encode them.

  comp_dict["t"] = type;
  comp_dict["l"] = [];

  if (cm_id) {
    let layers = document.querySelectorAll("section[data-layer]");
    for (let i = layers.length-1; i >= 0; i--) {
      let layer = layers[i];
      let el_keys = layer.querySelectorAll("[data-key]");
      let ltype = "e";
      let lobj = {};
      lobj["t"] = ltype; // default: e indicates the layer is empty
      for (let j = 0; j < el_keys.length; j++) {
        let el_key = el_keys[j];

        let key = el_key.getAttribute("data-key");
        let value;
        if (key === "id") {
          let opt = el_key.options[el_key.selectedIndex];
          if (opt.parentElement.tagName === "OPTGROUP") {
            ltype = opt.parentElement.id;
          }
          if (ltype !== "e") {
            value = encodeURIComponent(opt.value); // layer id. images can have special characters in file name, so need to encode them.
          }
        }

        if (key === "a") {
          let opt = el_key.options[el_key.selectedIndex];
          if (ltype !== "e") {
            value = opt.value;
          }
        }

        // move
        if ((ltype === "im" || ltype === "p" || ltype === "a" || ltype === "n") && key === "m") {
          let opt = el_key.options[el_key.selectedIndex];
          value = opt.value;
        }

        //stringify() wraps numbers in quotes so wrap numbers in !! to make it easy to remove the quotes.
        //any number that you want to represented as a number in json should have the value set above this
        //code block
        if (value && !isNaN(value)) {
          value = "!!"+value+"!!";
        }

        // color
        if (ltype !== "e" && key === "c") {
          value = "1";
          let opt = el_key.options[el_key.selectedIndex];
          if (opt) {
            value = opt.value;
          }
        }

        // writing
        if (ltype === "w" && key === "w") {
          // % and & will not work unless encodeURIComponent() is called when setting the body variable
          // value = encodeURIComponent(el_key.value) used to be in this code block
          // but that caused issues with JSON.stringify() not escaping characters.
          value = el_key.value;
        }

        if (value) {
          lobj[key] = value;
        }
      }
      lobj["t"] = ltype;
      comp_dict["l"].push(lobj);
    }

    // stringify escapes characters like " and \, so using them in a text message should not be a problem.
    let json = JSON.stringify(comp_dict);
    const regex = /"!!(-?[0-9]+\.{0,1}[0-9]*)!!"/g 
    json = json.replace(regex, '$1')

    // I have seen conflicting info on how application/x-www-form-urlencoded works.
    // It seems like % and & in a text message within the json variable should be automatically encoded,
    // but they are not. Using encodeURIComponent() fixes that problem.
    // Perhaps the data has to actually come from form elements to be encoded automatically.
    let body = `t=${type}&id=${cm_id}&json=${encodeURIComponent(json)}`;

    let success = false;
    let sb = document.getElementById("saveSvg");
    sb.setAttribute("fill", "#cccccc");
    let el_btn_save_text = document.getElementById('btn_save_text');
    el_btn_save_text.innerText = "Saving";

    try {
      const response = await fetch(base_url+"/save", {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        },
        body: body
      });
      if (!response.ok) {
        throw new Error(`Error saving ${id}`);
      }
      success = true;
    }
    catch(e) {
      console.error(e);
      success = false;
    }

    if (success) {
      sb.setAttribute("fill", "#056b0a");
      el_btn_save_text.innerText = "Saved";
      setTimeout(function(){el_btn_save_text.innerText = "Save";}, 1000);
      setTimeout(function(){populate(false)}, 3000);
    }
    else {
      sb.setAttribute("fill", "#6b050c");
      el_btn_save_text.innerText = "Error";
    }
  }

}


function handle_reorder(id_num, direction) {
  let section = document.getElementById(`l${id_num}`);
  let selects = section.querySelectorAll("select");
  let selected_indexes = [];
  for (let select of selects) {
    selected_indexes.push(select.selectedIndex);
  }

  let new_section = document.createDocumentFragment();
  new_section.appendChild(section.cloneNode(true));
  selects = new_section.querySelectorAll("select");
  for (let i in selects) {
    selects[i].selectedIndex = selected_indexes[i];
  }
  let layers_container = document.getElementById("layers_container");
  if (direction === "up") {
    if (section.previousElementSibling.id != "title_row") {
      layers_container.insertBefore(new_section, section.previousElementSibling);
      section.remove();
    }
  }
  else if (direction === "down" && section.nextElementSibling) {
    layers_container.insertBefore(new_section, section.nextElementSibling.nextElementSibling);
    section.remove();
  }
}


function enable_disable_settings(el_select, id_num) {
  let opt = el_select.options[el_select.selectedIndex];
  let type = "e"; // need to set to e in order to disable all settings when empty layer is chosen.
  if (opt.parentElement.tagName === "OPTGROUP") {
    type = opt.parentElement.id;
  }

  let els = document.querySelectorAll(`[id^="l${id_num}"][data-setting-for]`);
  for (let el of els) {
    let dnew = true;
    let enabled_for_types = el.getAttribute("data-setting-for").split(",");
    if (enabled_for_types.includes(type)) {
      dnew = false;
    }
    else {
      if (el.getAttribute("data-key") == "a") {
        el.selectedIndex = 0;
      }

      if (el.getAttribute("data-key") == "cp") {
        el.value = "#FFFFFF";
        el.dispatchEvent(new Event('input'));
      }

      if (el.getAttribute("data-key") == "c") {
        el.selectedIndex = 0;
        el.dispatchEvent(new Event('change'));
      }

      el.selected = false;

      if (el.type == "text") {
        el.value = "";
      }
    }
    el.disabled = dnew;
  }
}


async function load_composite(el_select) {
  let id = el_select.options[el_select.selectedIndex].label;
  let url = `${base_url}${el_select.options[el_select.selectedIndex].value}`;

  let data;
  try {
    let response = await fetch(url);
    if (!response.ok) {
      throw new Error(`Error fetching ${id}`);
    }
    data = await response.json();
    if (!(data["t"] === "cm")) {
      throw new Error("Error JSON data is invalid.");
    }
  }
  catch(e) {
    console.error(e);
    return;
  }

  document.getElementById("cm_id").value = id;

  for (i in data["l"]) {
    let layer = data["l"][i];

    // initialize all layers to empty
    // if an effect is referenced in composite but no longer exist then it will not be selected from the available options (i.e. the layer will not be updated)
    // initializing to empty ensure a previously set layer will not stick around because a composite was loaded with a missing effect
    let id_select = document.getElementById(`l${i}id`);
    id_select.selectedIndex = 0;
    id_select.dispatchEvent(new Event('change'));
    
    if (layer["t"] === "e") {
      continue;
    }


    if (layer["id"] != "" || !isNaN(layer["id"])) {
      let found = false;
      let id_select = document.getElementById(`l${i}id`);
      for (let j = 0; j < id_select.options.length; j++) {
        let option = id_select.options[j];
        if (option.value.indexOf(layer["id"]) != -1 && (option.parentElement.id === layer["t"] || layer["t"] === "e")) {
          option.selected = true;
          id_select.dispatchEvent(new Event('change'));
          found = true;
          break;
        }
      }
      if (!found) {
        // if item no longer exists it will not be one of the available options so it cannot be selected
        console.log(`${layer["id"]} not found in Effect list`);
      }
    }


    if (!isNaN(layer["a"])) {
      let found = false;
      let accent_select = document.getElementById(`l${i}a`);
      for (let j = 0; j < accent_select.options.length; j++) {
        let option = accent_select.options[j];
        if (option.value.indexOf(layer["a"]) != -1) {
          option.selected = true;
          found = true;
          break;
        }
      }
      if (!found) {
        // if item no longer exists it will not be one of the available options so it cannot be selected
        console.log(`${layer["a"]} not found in Accent list`);
      }
    }


    if (!isNaN(layer["c"])) {
      let color_picker = document.getElementById(`l${i}cp`);
      let color_select = document.getElementById(`l${i}c`);

      let color = layer["c"];
      let color_type = 1;
      if (color.indexOf("0x") === 0) {
        color_type = 0;
        color = "#" + color.slice(2);
      }
      else {
        color_type = color;
        color = "#000000";
      }

      color_picker.value = color;
      color_picker.dispatchEvent(new Event('input'));

      color_select.selectedIndex = color_type;
      color_select.dispatchEvent(new Event('change'));
    }


    if (!isNaN(layer["m"])) {
      let movement_select = document.getElementById(`l${i}m`);
      for (let j = 0; j < movement_select.options.length; j++) {
        let option = movement_select.options[j];
        if (option.value.indexOf(layer["m"]) != -1) {
          option.selected = true;
          break;
        }
      }
    }

    if (typeof layer["w"] === "string") {
      let writing = document.getElementById(`l${i}w`);
      writing.value = layer["w"];
    }
  }
}


async function populate_composite_list(files) {
  let cm_select = document.getElementById("cm_list");
  cm_select.innerHTML = "<option disabled selected value> -- load composite -- </option>";

  if (files) {
    const FILE_ROOT = Object.keys(files)[0];
    const type = "cm";
    if (FILE_ROOT && files[FILE_ROOT][type] && Object.keys(files[FILE_ROOT][type]).length > 0) { 
      Object.keys(files[FILE_ROOT][type]).forEach(id => {
        cm_select.insertAdjacentHTML("beforeend", `<option value="${FILE_ROOT}/${type}/${id}.json">${id}</option>`)
      });
    }
    else {
      console.log("No composite files.");
    }
  }
}


async function populate_layers(files) {
  let data;
  try {
    let response = await fetch(`${base_url}/options.json`);
    if (!response.ok) {
      throw new Error(`Error fetching options.json`);
    }
    data = await response.json();
    if (!data) {
      throw new Error("Error JSON data is invalid.");
    }
  }
  catch(e) {
    console.error(e);
    return;
  }

  if (files) {
    const FILE_ROOT = Object.keys(files)[0];
    const type = "im";
    if (FILE_ROOT && files[FILE_ROOT][type] && Object.keys(files[FILE_ROOT][type]).length > 0) { 
      const images = files[FILE_ROOT][type];
      let el_selects = document.querySelectorAll('select[data-key="id"]');
      for (el_select of el_selects) {
        el_select.insertAdjacentHTML("beforeend", `<optgroup id="${type}" label="Images">`);
      }
      Object.keys(images).forEach(id => {
        //cm_select.insertAdjacentHTML("beforeend", `<option value="${FILE_ROOT}/${type}/${id}.json">${id}</option>`)
        let el_optgroups = document.querySelectorAll(`optgroup[id="${type}"]`);
        for (el_optgroup of el_optgroups) {
          el_optgroup.insertAdjacentHTML("beforeend", `<option value="${id}">${id}</option>`);
        }
      });
    }
    else {
      console.log("No image files.");
    }
  }

  let patterns = data["patterns"];
  if (patterns) {
    let el_selects = document.querySelectorAll('select[data-key="id"]');
    for (el_select of el_selects) {
      el_select.insertAdjacentHTML("beforeend", '<optgroup id="p" label="Patterns">');
    }

    for (let i = 0; i < patterns.length; i++) {
      let id = patterns[i].id;
      let name = patterns[i].name;
      let el_optgroups = document.querySelectorAll('optgroup[id="p"]');
      for (el_optgroup of el_optgroups) {
        el_optgroup.insertAdjacentHTML("beforeend", `<option value="${id}">${name}</option>`);
      }
    }
  }

  let accents = data["accents"];
  if (accents) {
    for (let i = 0; i < accents.length; i++) {
      let id = accents[i].id;
      let name = accents[i].name;
      let el_selects = document.querySelectorAll('select[data-key="a"]');
      for (el_select of el_selects) {
        el_select.insertAdjacentHTML("beforeend", `<option value="${id}">${name}</option>`);
      }
    }
  }

  let texts = ["Enter Text"];
  if (texts) {
    let el_selects = document.querySelectorAll('select[data-key="id"]');
    for (el_select of el_selects) {
      el_select.insertAdjacentHTML("beforeend", '<optgroup id="w" label="Text">');
    }
  
    for (let i = 0; i < texts.length; i++) {
      let id = i;
      let name = texts[i];
      let el_optgroups = document.querySelectorAll('optgroup[id="w"]');
      for (el_optgroup of el_optgroups) {
        el_optgroup.insertAdjacentHTML("beforeend", `<option value="${id}">${name}</option>`);
      }
    }
  }

  let info = ["Time (12 hour)", "Time (24 hour)", "Date (MM/DD)", "Date (DD/MM)", "Time (12 hour) & Date (MM/DD)", "Time (24 hour) & Date (DD/MM)"];
  if (info) {
    let el_selects = document.querySelectorAll('select[data-key="id"]');
    for (el_select of el_selects) {
      el_select.insertAdjacentHTML("beforeend", '<optgroup id="n" label="Info">');
    }
  
    for (let i = 0; i < info.length; i++) {
      let id = i;
      let name = info[i];
      let el_optgroups = document.querySelectorAll('optgroup[id="n"]');
      for (el_optgroup of el_optgroups) {
        el_optgroup.insertAdjacentHTML("beforeend", `<option value="${id}">${name}</option>`);
      }
    }
  }
}


function handle_color_picker(el_changed, id_num) {
  let color_select = document.getElementById(`l${id_num}c`);
  let custom_option = color_select.options[0];
  let color = el_changed.value.replace("#", "").toUpperCase();
  custom_option.innerHTML = `Custom (${el_changed.value.toUpperCase()})`
  custom_option.value = `0x${color}`
  custom_option.selected = true;
  color_select.dispatchEvent(new Event('change'));
}


function handle_color_select(el_changed, id_num) {
  let color = `#${el_changed.value.slice(2)}`;
  let color_picker = document.getElementById(`l${id_num}cp`);
  color_picker.value = color;
  let overlay_color = document.getElementById(`l${id_num}ol`);
  overlay_color.innerText = ""; 
  if (el_changed.selectedOptions[0].innerHTML === "Dynamic 1") {
    overlay_color.style.backgroundImage = "linear-gradient(90deg, red, orange, yellow, green, aqua, blue, purple)";
  }
  else if (el_changed.selectedOptions[0].innerHTML === "Dynamic 2") {
    // to get Dynamic 2, subtract the colors in the Dynamic 1 color spectrum from #FFFFFF. for example, #FFFFFF - #FF0000 (red) = #00FFFF (aqua)
    // these do not represent the actual colors used by Dynamic 2. they are meant to visually convey that Dynamic 2 is the complement of Dynamic 1.
    //                                                             red,  orange, yellow,   green, aqua,   blue,  purple
    overlay_color.style.backgroundImage = "linear-gradient(90deg, aqua, #005AFF,   blue, magenta,  red, yellow, #008000)";
  }
  else {
    overlay_color.style.background = "none";
  }
}


function create_color_options() {
  let color_options_html = "";
  //let color_names = ["Custom", "Dynamic 1", "Dynamic 2", "Black", "White", "Red", "Yellow", "Orange", "Green", "Aqua", "Blue", "Purple", "Pink"];
  // CSS Purple is #800080 but that is too dark so use #A020F0 instead?
  //let color_values = ["0xFFFFFF", "1", "2", "0x000000", "0xFFFFFF", "0xFF0000", "0xFFFF00", "0xFFA500", "0x00FF00", "0x00FFFF", "0x0000FF", "0xA020F0", "0xFFC0CB"];

  // complementary colors are placed next to each other
  let color_names = [     "Custom",  "Dynamic 1",  "Dynamic 2",      "White",      "Black",        "Red",       "Aqua",      "Green",    "Magenta",       "Blue",     "Yellow",     "Orange", "Ultramarine",       "Pink",       "Mint"];
  let color_values = ["0xFFFFFF", "1", "2", "0xFFFFFF", "0x000000", "0xFF0000", "0x00FFFF", "0x00FF00", "0xFF00FF", "0x0000FF", "0xFFFF00", "0xFFA500",  "0x005AFF", "0xFFC0CB", "0xC0FFF4"];
  color_options_html += `      <optgroup label="From Color Picker"><option value="${color_values[0]}">${color_names[0]} (${color_values[0].replace('0x', '#')})</option></optgroup>${newline_char}`
  color_options_html += `      <optgroup label="Predefined">${newline_char}`
  //color_options_html += `      <option value="${color_values[1]}" selected="true">${color_names[1]}</option>${newline_char}`
  for (let i = 1; i < color_names.length; i++) {
    color_options_html += `      <option value="${color_values[i]}">${color_names[i]}</option>${newline_char}`
  }

  color_options_html += `      </optgroup>${newline_char}`
  return color_options_html;
}


function create_layers_ui() {
  let color_options_html = create_color_options();

  // t_num_layers is defined in a separate file so it can be run through the webserver's template processor
  // gzipped html cannot be run through the template processor, so it is necessary for t_num_layers to be separate
  if (t_num_layers.replaceAll("~", "") === "NUM_LAYERS") {
    t_num_layers = "6";
  }

  let layer_id_num = parseInt(t_num_layers);
  let layers_container = document.getElementById("layers_container");
  while (layer_id_num) {
    layer_id_num--;
    let layer = `
<section id="l${layer_id_num}" data-layer="l${layer_id_num}">
    <div class="item-a">
      <input type="button" value="↑" onclick="handle_reorder(${layer_id_num}, 'up')" />
      <input type="button" value="↓" onclick="handle_reorder(${layer_id_num}, 'down')" />
    </div>
    <select id="l${layer_id_num}id" data-key="id" onchange="enable_disable_settings(this, ${layer_id_num})">
      <option value="0">Empty</option>
    </select>
    <select id="l${layer_id_num}a" data-setting-for="im,p,w,n" data-key="a" autocomplete="off" disabled >
    </select>
    <div style="display:flex; width: 100%">
      <div style="position:relative; contain: paint">
        <input id="l${layer_id_num}cp" type="color" data-key="cp" data-setting-for="im,p,w,n" autocomplete="off" value="#FFFFFF" oninput="handle_color_picker(this, ${layer_id_num})" disabled />
        <div id="l${layer_id_num}ol" style="position: absolute; top: 0; left: 0; margin: 0; border: none; width: 100%; height: 100%; pointer-events: none; color: black; display: flex; justify-content: center; align-content: center; flex-direction: column;"></div>
      </div>
      <select id="l${layer_id_num}c" data-key="c" data-setting-for="im,p,w,n" autocomplete="off" style="flex-grow:1" onchange="handle_color_select(this, ${layer_id_num})" disabled >
${color_options_html}
      </select>
    </div>
    <select id="l${layer_id_num}m" data-setting-for="im,p,a,n" data-key="m" autocomplete="off" disabled />
      <option value="0">Still</option>
      <option value="1">↑</option>
      <option value="2">↗</option>
      <option value="3">→</option>
      <option value="4">↘</option>
      <option value="5">↓</option>
      <option value="6">↙</option>
      <option value="7">←</option>
      <option value="8">↖</option>
    </select>
    <input type="text" id="l${layer_id_num}w" data-setting-for="w" data-key="w" autocomplete="off" disabled />
</section>`;
    layers_container.insertAdjacentHTML("beforeend", layer);
  }
}


function convert_to_object(file_list_string) {
  let output = {};
  if (file_list_string.length === 0 || !file_list_string.startsWith("ROOT:")) {
    return output;
  }
  
  // guard against return and newline being used to separate lines.
  file_list_lines = file_list_string.replaceAll(return_char + newline_char, newline_char).split(newline_char);
  let FILE_ROOT = file_list_lines.shift();
  FILE_ROOT = FILE_ROOT.slice(5);
  
  output[FILE_ROOT] = {};

  for (let i = 0; i < file_list_lines.length; i++) {
    if (file_list_lines[i].endsWith("/")) {
      const type = file_list_lines[i].slice(0, -1);
      output[FILE_ROOT][type] = {};
      continue;
    }
    const si = file_list_lines[i].indexOf("/");
    if (si == -1) {
      continue; // bad entry
    }
    const type = file_list_lines[i].substring(0, si);
    const id = file_list_lines[i].substring(si+1);
    output[FILE_ROOT][type][id] = 0;
  }
  return output;
}


async function populate(initial_load) {
  let files;
  try {
    let response = await fetch(`${base_url}/file_list`);
    if (!response.ok) {
      throw new Error("Error fetching /file_list");
    }

    // a lot of html and javascript was already written for processing json file lists but it was
    // decided that using a text file list would keep things simpler in the microcontroller code.
    // converting a text file list to an object, so it can be processed using code already written
    // for processing a json /file_list. this leaves option the option open for returning to a json
    // file list in the microcontroller code in the future.
    response_text = await response.text();
    files = convert_to_object(response_text);
    
    //files = await response.json();
    
    if (Object.keys(files).length === 0 && files.constructor === Object) {
      throw new Error("Error file list is empty.");
    }
    
  }
  catch(e) {
    console.error(e);
    files = null; // files = {}; if (files) is true so use null
    // this is not a fatal error. device can still operate normally without any files.
  }

  if (initial_load) {
    populate_layers(files);
  }
  populate_composite_list(files);
}


function run() {
  create_layers_ui();
  //let color_selects = document.querySelectorAll('select[data-key="c"]');
  //for (color_select of color_selects) {
  //  color_select.dispatchEvent(new Event('change'));
  //}
  populate(true);
}

window.addEventListener("load", run);

</script>

</body>
</html>
