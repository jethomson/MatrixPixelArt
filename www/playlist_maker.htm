<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no" />
  <meta http-equiv="Cache-Control" content="private, no-store" />
  <title>Playlist Maker</title>
  <style>
  html {
    touch-action: manipulation
    overflow: auto;
  }

  body {
    font-family: Arial, sans-serif;
    color: #faffff;
    background: #111;
    font-size: 17px;
    text-align: center;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
  }

  #main_div {
    max-width: 1400px;
    margin: auto;
  }

  #return_main_menu {
    float: left;
  }

  .grid-container {
    display: grid;
    grid-template-columns: repeat(3, minmax(20px, 1fr));
    grid-column-gap: 5px;
    width: 1000px;
    max-width: 95vw;
    justify-content: center;
    margin: 5px auto;
    padding: 5px;
  }

  .grid-container div {
    border: 1px solid #fff;
  }
  
  
  #button-container {
    display: flex;
    padding-bottom: 10px;
    padding-top: 10px;
    max-width: 600px;
    margin: 5px auto;
  }
  .buttonclass {
    flex:1;
    padding-top:5px;
    padding-bottom:5px;
  }

  input#plid{
    flex-grow: 1;
    padding-top: 5px;
    padding-bottom: 5px;
    background: #222;
    border: 1px solid #333;
    padding-inline: 5px;
    max-width: 225px;
    border-radius: 7px;
    font-family: Arial,sans-serif;
    font-size: 15px;
    color: #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .gap {
    width:10px;
  }


  button {
    background: #222;
    border: 1px solid #333;
    padding-inline: 5px;
    width: 100%;
    border-radius: 24px;
    font-family: Arial, sans-serif;
    font-size: 1em;
    color: #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor:pointer;
  }
  /*
  button:hover,
  input[type="button"]:hover {
    background: #0e70a4;
  }
  */
  
  .buttonclass {
    flex: 1;
    padding-top: 5px;
    padding-bottom: 5px;
  }
 
  .svg-icon {
    vertical-align: middle;
  }
  
  
  ul {
    margin: 0;
    padding: 0;
  }

   li {
    margin: 5px auto;
    border: 0;
    border-radius: 0.3rem;
    line-height: 1.6rem;
    font-size: 0.8rem;
    list-style: none;
    padding: 8px 0px;
    width: 100%;
    overflow-wrap: anywhere;
    transition-duration: 0.4s;
    cursor: pointer;
  }
  
  li {

  }

  #savebtn {
    background: #1fa3ec;
  }

  #ul_playlist {
    background: #333;
  }

  #ul_playlist > li {
    display: grid;
    grid-template-columns: auto auto;
    cursor: move;
  }

  #ul_playlist > li.selected {
    background: rgba(255,0,0,.5);
  }
  
  #ul_playlist > li > label{
    grid-column: span 2;
    overflow-wrap: anywhere;
  }

  .image {
    background: #bb8888;
  }
  
  .composite {
    background: #88bb88;
  }

  .animation {
    background: #88bbbb;
  }

  .playlist {
    background: #8888bb;
  }

  input[type="number"],
  input[type="text"] {
    color: #faffff;
    background: #333;
    border: 0 solid #fff;
    border-radius: 0.3rem;
    margin: 0px 6px;
    font-size: 19px;
    transition: background-color .2s;
    outline: 0;
    -webkit-appearance: textfield;
    -moz-appearance: textfield;
    appearance: textfield
  }
  
  ::selection {
    background: #bbb;
  }

  input[type="number"] {
    text-align: right;
    max-width: 45px;
    max-height: 20px;
    margin-left: auto;
  }

  input[type="text"] {
    text-align: center;
    max-width: 200px;
  }

  input[type="number"]:focus,
  input[type="text"]:focus {
    background: #666
  }

  .rmbutton {
    color: #faffff;
    background: #f00;
    border-radius: 0.3rem;
    max-width: 20px;
    max-height: 20px;
    font-size: 10px;
  }

</style>
</head>

<body>
  <a id="return_main_menu" href="./index.htm"><svg height="24px" width="24px" viewBox="0 0 16 16" id="Layer_1" version="1.1" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path fill="white" d="M15.45,7L14,5.551V2c0-0.55-0.45-1-1-1h-1c-0.55,0-1,0.45-1,1v0.553L9,0.555C8.727,0.297,8.477,0,8,0S7.273,0.297,7,0.555  L0.55,7C0.238,7.325,0,7.562,0,8c0,0.563,0.432,1,1,1h1v6c0,0.55,0.45,1,1,1h3v-5c0-0.55,0.45-1,1-1h2c0.55,0,1,0.45,1,1v5h3  c0.55,0,1-0.45,1-1V9h1c0.568,0,1-0.437,1-1C16,7.562,15.762,7.325,15.45,7z"/></svg></a>

  <h3>Click an item in Saved Art or Saved Playlists to load it into the Edit Playlist area. Drag and drop to rearrange items, adjust play time, and save to make a playlist.</h3>
  <h5>If you name your playlist <b>startup</b> it will be automatically loaded when the device starts.</h5>

  <div id="main_div">
    <div id="button-container">
      <input type="text" id="plid" maxlength=26 placeholder="Enter filename here." value="" autocomplete="off" />
      <div id="gap1" class="gap"></div>
      <button id="btn_save" class="buttonclass" onclick="save()"><svg class="svg-icon" style="width:36px;height:36px" viewBox="0 0 24 24"> <path id="sendSvgP" fill="currentColor" d="M6.5 20Q4.22 20 2.61 18.43 1 16.85 1 14.58 1 12.63 2.17 11.1 3.35 9.57 5.25 9.15 5.88 6.85 7.75 5.43 9.63 4 12 4 14.93 4 16.96 6.04 19 8.07 19 11 20.73 11.2 21.86 12.5 23 13.78 23 15.5 23 17.38 21.69 18.69 20.38 20 18.5 20H13Q12.18 20 11.59 19.41 11 18.83 11 18V12.85L9.4 14.4L8 13L12 9L16 13L14.6 14.4L13 12.85V18H18.5Q19.55 18 20.27 17.27 21 16.55 21 15.5 21 14.45 20.27 13.73 19.55 13 18.5 13H17V11Q17 8.93 15.54 7.46 14.08 6 12 6 9.93 6 8.46 7.46 7 8.93 7 11H6.5Q5.05 11 4.03 12.03 3 13.05 3 14.5 3 15.95 4.03 17 5.05 18 6.5 18H9V20M12 13Z"></path> </svg>&nbsp; Save</button>
    </div>
    <div class="grid-container">
      <div>
        <h4>Saved Art</h4>
        <!--ul was used here instead a div of buttons to get better alignment with the elements in ul_playlist-->
        <ul id="art_ul">
        </ul>
      </div>
      <div class="dropzone">
        <h4>Edit Playlist <input type="button" value="&#10006;" class="rmbutton" onclick="clear_playlist_work()"/></h4>
        <ul id="ul_playlist">
        </ul>
      </div>
      <div>
        <h4>Saved Playlists</h4>
        <ul id="pl_ul">
        </ul>
      </div>
    </div>
  </div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.10.1/Sortable.min.js"></script>
<script>

let base_url = "";
if (window.location.protocol == "file:") {
  // makes for easier debugging.
  // if html is loaded locally, can see the results of editing more easily.
  // otherwise every change to html would require uploading new version to microcontroller.
  base_url = "http://pixelart.local";
}

let ul_playlist = document.getElementById("ul_playlist");


function add(item, value) {
    item.insertAdjacentHTML("beforeend", `<input title="seconds" type="number" onfocusout="(function(e){e.reportValidity();})(this);" min="0.2" step="0.1" value="${value}"/>`)
    item.insertAdjacentHTML("beforeend", '<input type="button" value="&#10006;" class="rmbutton"/>')
}

let playlist = new Sortable(ul_playlist, {
  group: {
    name: "plm_lists",
    //pull: "clone"
  },
  animation: 150,
  filter: ".rmbutton",
  //onAdd: function (evt) {add(evt.item, 20)},
  onFilter: function (evt) {
    let item = evt.item;
    let ctrl = evt.target;
    
    if (Sortable.utils.is(ctrl, ".rmbutton")) {
      item.parentNode.removeChild(item);
    }
  },
  // prevents input field from being an area that can be grabbed so cursor works normally
  filter: 'input',
  preventOnFilter: false
});


async function load_effect_into_dropzone(type, id) {
  if (type === "im") {
    ul_playlist.insertAdjacentHTML("beforeend", `<li class="image" data-type="${type}" data-id="${id}"><label>${id}</label></li>`);
    add(ul_playlist.lastElementChild, 20);
  }
  else if (type === "cm") {
    ul_playlist.insertAdjacentHTML("beforeend", `<li class="composite" data-type="${type}" data-id="${id}"><label>${id}</label></li>`);
    add(ul_playlist.lastElementChild, 20);
  }
  else if (type === "an") {
    ul_playlist.insertAdjacentHTML("beforeend", `<li class="animation" data-type="${type}" data-id="${id}"><label>${id}</label></li>`);
    add(ul_playlist.lastElementChild, 20);
  }
}


async function load_playlist_into_dropzone(path, id) {
  const t = await fetch(base_url+path);
  let list = await t.json();
  if (list) {
    let items = list["pl"];
    console.log(list);
    for (let i = 0; i < items.length; i++) {
      let type = items[i]["t"]; 
      let id = items[i]["id"];
      let d = items[i]["d"];
      if (type === "im") { 
        ul_playlist.insertAdjacentHTML("beforeend", `<li class="image" data-type="${type}" data-id="${id}"><label>${id}</label></li>`);
        // not sure why this doesn't work
        //let event = new Event('add', { bubbles: true });
        //ul_playlist.lastElementChild.dispatchEvent(event);
        add(ul_playlist.lastElementChild, d/1000);
      }
      else if (type === "cm") { 
        ul_playlist.insertAdjacentHTML("beforeend", `<li class="composite" data-type="${type}" data-id="${id}"><label>${id}</label></li>`);
        add(ul_playlist.lastElementChild, d/1000);
      }
      else if (type === "an") { 
        ul_playlist.insertAdjacentHTML("beforeend", `<li class="animation" data-type="${type}" data-id="${id}"><label>${id}</label></li>`);
        add(ul_playlist.lastElementChild, d/1000);
      }
    }
    document.getElementById("plid").value = id;
  }
}

function clear_playlist_work() {
  document.getElementById("ul_playlist").innerHTML = "";
}

function populate_effects(list) {
  let art_ul = document.getElementById("art_ul");
  let pl_ul = document.getElementById("pl_ul");
  art_ul.innerHTML = "";
  pl_ul.innerHTML = "";
  for (let i = 0; i < list.length; i++) {
    let type = list[i]["t"];
    let path = list[i]["p"];
    let id = list[i]["id"];
    if (type && id) { 
      if (type == "im") {
        art_ul.insertAdjacentHTML("beforeend", `<li class="image" onclick="load_effect_into_dropzone('${type}', '${id}')">${id}</li>`)
      }
      else if (type == "cm") {
        art_ul.insertAdjacentHTML("beforeend", `<li class="composite" onclick="load_effect_into_dropzone('${type}', '${id}')">${id}</li>`)
      }
      else if (type == "an") {
        art_ul.insertAdjacentHTML("beforeend", `<li class="animation" onclick="load_effect_into_dropzone('${type}', '${id}')">${id}</li>`)
      }
      else if (type == "pl") {
        pl_ul.insertAdjacentHTML("beforeend", `<li class="playlist" onclick="load_playlist_into_dropzone('${path}', '${id}')">${id}</li>`)
      }
    }
    ul_playlist.style.minHeight = art_ul.offsetHeight;
  }
}


async function fetch_source() {
  const t = await fetch(base_url+"/file_list.json");
  let reply = await t.json();
  populate_effects(reply);
}


async function save() {
  const type = "pl";
  let plid = document.getElementById("plid").value;
  let li = ul_playlist.getElementsByTagName("li");
  
  console.log(plid);
    
  if (plid && li.length > 0) {
    let o = {};
    o.t = type;
    o.pl = [];
    for (let i = 0; i < li.length; i++) {
      let v = li[i].children[1].value;
      if (isNaN(v) || v < 0.200) {
        v = 0.200;
      }
      o.pl.push({"t": li[i].getAttribute("data-type"), "id": li[i].getAttribute("data-id"), "d": "!!"+(1000*v)+"!!"})
    }
    let json = JSON.stringify(o);
    //stringify() wraps numbers in quotes so wrap numbers in !! to make it easy to remove the quotes
    const regex = /"!!(-?[0-9]+\.{0,1}[0-9]*)!!"/g 
    json = json.replace(regex, '$1')
    console.log(json);
    
    console.log(`t=${type}&id=${plid}&json=` + json);

    let success = false;
    try {
      const t = await fetch(base_url+"/save", {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        },
        body: `t=${type}&id=${plid}&json=` + json
      }),
      reply = await t.json();
      console.log(reply);
      success = true;
    }
    catch(e) {
      console.error(e);
      success = false;
    }
    
    let sb = document.getElementById("sendSvgP");
    if (success) {
      sb.setAttribute("fill", "#056b0a");
      setTimeout(function(){sb.setAttribute("fill", "#eee"); fetch_source();}, 1000);
    }
    else {
      sb.setAttribute("fill", "#6b050c");
      setTimeout(function(){sb.setAttribute("fill", "#777")}, 1000);
    }
    
  }
  else {
    console.log("Missing Playlist ID or playlist is empty.");
  }
}

window.addEventListener("load", fetch_source);

</script>
</body>
</html>
