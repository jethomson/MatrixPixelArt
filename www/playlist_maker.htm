<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no" />
  <meta http-equiv="Cache-Control" content="private, no-store" />
  <title>Playlist Maker</title>
  <style>
  html {
    touch-action: manipulation;
    overflow: auto;
  }

  body {
    font-family: Arial, sans-serif;
    color: #faffff;
    background: #111;
    font-size: 17px;
    text-align: center;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
  }

  #main_div {
    max-width: 1400px;
    margin: auto;
  }

  #return_main_menu {
    float: left;
  }

  .grid-container {
    display: grid;
    grid-template-columns: repeat(2, minmax(20px, 1fr));
    grid-column-gap: 5px;
    width: 1000px;
    max-width: 95vw;
    justify-content: center;
    margin: 5px auto;
    padding: 5px;
  }

  .grid-container div {
    border: 1px solid #fff;
  }
  
  
  #button-container {
    display: flex;
    padding-bottom: 10px;
    padding-top: 10px;
    max-width: 600px;
    margin: 5px auto;
  }
  .buttonclass {
    flex:1;
    padding-top:5px;
    padding-bottom:5px;
  }

  select#pl_list,
  input#pl_id{
    flex-grow: 1;
    padding-top: 5px;
    padding-bottom: 5px;
    background: #222;
    border: 1px solid #333;
    padding-inline: 5px;
    max-width: 225px;
    border-radius: 7px;
    font-family: Arial,sans-serif;
    font-size: 15px;
    color: #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .gap {
    width:10px;
  }


  button {
    background: #222;
    border: 1px solid #333;
    padding-inline: 5px;
    width: 100%;
    border-radius: 24px;
    font-family: Arial, sans-serif;
    font-size: 1em;
    color: #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor:pointer;
  }
  /*
  button:hover,
  input[type="button"]:hover {
    background: #0e70a4;
  }
  */
  
  .buttonclass {
    flex: 1;
    padding-top: 5px;
    padding-bottom: 5px;
  }
 
  .svg-icon {
    vertical-align: middle;
  }
  
  
  ul {
    margin: 0;
    padding: 0;
  }

   li {
    margin: 5px auto;
    border: 0;
    border-radius: 0.3rem;
    line-height: 1.6rem;
    font-size: 0.8rem;
    list-style: none;
    padding: 8px 0px;
    width: 100%;
    overflow-wrap: anywhere;
    transition-duration: 0.4s;
    cursor: pointer;
  }
  
  #savebtn {
    background: #1fa3ec;
  }

  #ul_playlist {
    background: #333;
  }

  #ul_playlist > li {
    display: grid;
    grid-template-columns: auto auto;
    cursor: move;
  }

  #ul_playlist > li.selected {
    background: rgba(255,0,0,.5);
  }
  
  #ul_playlist > li > label{
    grid-column: span 2;
    overflow-wrap: anywhere;
  }

  .im {
    background: #bb8888;
  }
  
  .cm {
    background: #88bb88;
  }

  .an {
    background: #88bbbb;
  }

  .pl {
    background: #8888bb;
  }

  .legend {
    padding: 0px 5px;
  }

  input[type="number"],
  input[type="text"] {
    color: #faffff;
    background: #333;
    border: 0 solid #fff;
    border-radius: 0.3rem;
    margin: 0px 6px;
    font-size: 19px;
    transition: background-color .2s;
    outline: 0;
    -webkit-appearance: textfield;
    -moz-appearance: textfield;
    appearance: textfield
  }
  
  ::selection {
    background: #bbb;
  }

  input[type="number"] {
    text-align: right;
    max-width: 45px;
    max-height: 20px;
    margin-left: auto;
  }

  input[type="text"] {
    text-align: center;
    max-width: 200px;
  }

  input[type="number"]:focus,
  input[type="text"]:focus {
    background: #666
  }

  .rmbutton {
    color: #faffff;
    background: #f00;
    border-radius: 0.3rem;
    max-width: 20px;
    max-height: 20px;
    font-size: 10px;
  }

</style>
</head>

<body>
  <a id="return_main_menu" href="index.htm">
    <svg height="24px" width="24px" viewBox="0 0 16 16" id="Layer_1">
      <path fill="white" d="M15.45,7L14,5.551V2c0-0.55-0.45-1-1-1h-1c-0.55,0-1,0.45-1,1v0.553L9,0.555C8.727,0.297,8.477,0,8,0S7.273,0.297,7,0.555  L0.55,7C0.238,7.325,0,7.562,0,8c0,0.563,0.432,1,1,1h1v6c0,0.55,0.45,1,1,1h3v-5c0-0.55,0.45-1,1-1h2c0.55,0,1,0.45,1,1v5h3  c0.55,0,1-0.45,1-1V9h1c0.568,0,1-0.437,1-1C16,7.562,15.762,7.325,15.45,7z"/>
    </svg>
  </a>

  <h3>Click an item in Saved Art to load it into the Edit Playlist area. Drag and drop to rearrange items, adjust play time, and save to make a playlist.</h3>
  <h5>If you name your playlist <b>startup</b> it will be automatically loaded when the device starts.</h5>

  <div id="main_div">
    <div id="button-container">
      <select id="pl_list" onchange="load_playlist(this)" autocomplete="off">
        <option disabled selected value> -- load playlist -- </option>
      </select>
      <div class="gap"></div>
      <input type="text" id="pl_id" onkeyup="(function(key){if(key === 'Enter'){save();}})(event.key);" maxlength=26 placeholder="Enter filename here." value="" autocomplete="off" />
      <div class="gap"></div>
      <button id="btn_save" class="buttonclass" onclick="save()"><svg class="svg-icon" style="width:36px;height:36px" viewBox="0 -960 960 960"> <path id="saveSvg" fill="currentColor" d="M440-320v-326L336-542l-56-58 200-200 200 200-56 58-104-104v326h-80ZM240-160q-33 0-56.5-23.5T160-240v-120h80v120h480v-120h80v120q0 33-23.5 56.5T720-160H240Z"/></svg> &nbsp; <span id="btn_save_text">Save</span> </button>
    </div>
    <div class="grid-container">
      <div>
        <section>
          <h4 style="margin-bottom: 0px;">Saved Art</h4>
          <span class="legend an">A: animation</span>
          <span class="legend im">I: image</span>
          <span class="legend cm">C: composite</span>
        </section>
        <!--ul was used here instead a div of buttons to get better alignment with the elements in ul_playlist-->
        <ul id="art_ul">
        </ul>
      </div>
      <div class="dropzone">
        <h4>Edit Playlist <input type="button" value="&#10006;" class="rmbutton" onclick="clear_playlist_work()"/></h4>
        <ul id="ul_playlist">
        </ul>
      </div>
    </div>
  </div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.10.1/Sortable.min.js"></script>
<script>
// minifier code breaks code when some escape sequences (e.g. backslash n) are used
const newline_char = String.fromCharCode(10);
const return_char = String.fromCharCode(13);
//const tab_char = String.fromCharCode(9)

let base_url = "";
if (window.location.protocol == "file:") {
  // makes for easier debugging.
  // if html is loaded locally, can see the results of editing more easily.
  // otherwise every change to html would require uploading new version to microcontroller.
  base_url = "http://pixelart.local";
}

let ul_playlist = document.getElementById("ul_playlist");

let playlist = new Sortable(ul_playlist, {
  group: {
    name: "plm_lists",
    //pull: "clone"
  },
  animation: 150,
  filter: ".rmbutton",
  //onAdd: function (evt) {add(evt.item, 20)},
  onFilter: function (evt) {
    let item = evt.item;
    let ctrl = evt.target;
    
    if (Sortable.utils.is(ctrl, ".rmbutton")) {
      item.parentNode.removeChild(item);
    }
  },
  // prevents input field from being an area that can be grabbed so cursor works normally
  filter: 'input',
  preventOnFilter: false
});


async function save() {
  const type = "pl";
  let pl_id = encodeURIComponent(document.getElementById("pl_id").value);
  let li = ul_playlist.getElementsByTagName("li");

  if (pl_id && li.length > 0) {
    let o = {};
    o.t = type;
    o.pl = [];
    for (let i = 0; i < li.length; i++) {
      let v = li[i].children[1].value;
      if (isNaN(v) || v < 0.200) {
        v = 0.200;
      }
      o.pl.push({"t": li[i].getAttribute("data-type"), "id": encodeURIComponent(li[i].getAttribute("data-id")), "d": "!!"+(1000*v)+"!!"})
    }
    let json = JSON.stringify(o);
    //stringify() wraps numbers in quotes so wrap numbers in !! to make it easy to remove the quotes
    const regex = /"!!(-?[0-9]+\.{0,1}[0-9]*)!!"/g 
    json = json.replace(regex, '$1')
    
    let success = false;
    let sb = document.getElementById("saveSvg");
    sb.setAttribute("fill", "#cccccc");
    let el_btn_save_text = document.getElementById('btn_save_text');
    let btn_text = el_btn_save_text.innerText;
    el_btn_save_text.innerText = "Saving";

    try {
      const response = await fetch(base_url+"/save", {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        },
        body: `t=${type}&id=${pl_id}&json=` + json
      });
      if (!response.ok) {
        throw new Error(`Error fetching from ${path}.`);
      }
      success = true;
    }
    catch(e) {
      console.error(e);
      success = false;
    }

    if (success) {
      sb.setAttribute("fill", "#056b0a");
      el_btn_save_text.innerText = "Saved";
      setTimeout(function(){el_btn_save_text.innerText = btn_text;}, 1000);
      setTimeout(function(){populate(false)}, 3000);
    }
    else {
      sb.setAttribute("fill", "#6b050c");
      el_btn_save_text.innerText = "Error";
    }
  }
  else {
    console.log("Missing Playlist ID or playlist is empty.");
  }

}


function add(item, value) {
    item.insertAdjacentHTML("beforeend", `<input title="seconds" type="number" onfocusout="(function(e){e.reportValidity();})(this);" min="0.2" step="0.1" value="${value}"/>`)
    item.insertAdjacentHTML("beforeend", '<input type="button" value="&#10006;" class="rmbutton"/>')
}


async function load_effect_into_dropzone(type, id) {
  if (type === "an") {
    ul_playlist.insertAdjacentHTML("beforeend", `<li class="an" data-type="${type}" data-id="${id}"><label>A: ${id}</label></li>`);
    add(ul_playlist.lastElementChild, 20);
  }
  else if (type === "cm") {
    ul_playlist.insertAdjacentHTML("beforeend", `<li class="cm" data-type="${type}" data-id="${id}"><label>C: ${id}</label></li>`);
    add(ul_playlist.lastElementChild, 20);
  }
  else if (type === "im") {
    ul_playlist.insertAdjacentHTML("beforeend", `<li class="im" data-type="${type}" data-id="${id}"><label>I: ${id}</label></li>`);
    add(ul_playlist.lastElementChild, 20);
  }
}


function clear_playlist_work() {
  document.getElementById("ul_playlist").innerHTML = "";
}


async function load_playlist(el_select) {
  clear_playlist_work();

  let id = el_select.options[el_select.selectedIndex].label;
  let url = `${base_url}${el_select.options[el_select.selectedIndex].value}`;
  console.log(url);

  let data;
  try {
    let response = await fetch(url);
    if (!response.ok) {
      throw new Error(`Error fetching ${id}`);
    }
    data = await response.json();
    if (!data) {
      throw new Error("Error JSON data is invalid.");
    }
  }
  catch(e) {
    console.error(e);
    return;
  }

  document.getElementById("pl_id").value = id;

  let items = data["pl"];
  for (let i = 0; i < items.length; i++) {
    let type = items[i]["t"];
    let id = items[i]["id"];
    let d = items[i]["d"];
    if (type === "an") {
      // not sure why this doesn't work
      //let event = new Event('add', { bubbles: true });
      //ul_playlist.lastElementChild.dispatchEvent(event);
      ul_playlist.insertAdjacentHTML("beforeend", `<li class="an" data-type="${type}" data-id="${id}"><label>A: ${id}</label></li>`);
      add(ul_playlist.lastElementChild, d/1000);
    }
    else if (type === "cm") {
      ul_playlist.insertAdjacentHTML("beforeend", `<li class="cm" data-type="${type}" data-id="${id}"><label>C: ${id}</label></li>`);
      add(ul_playlist.lastElementChild, d/1000);
    }
    else if (type === "im") {
      ul_playlist.insertAdjacentHTML("beforeend", `<li class="im" data-type="${type}" data-id="${id}"><label>I: ${id}</label></li>`);
      add(ul_playlist.lastElementChild, d/1000);
    }
  }
  document.getElementById("pl_id").value = id;
}

async function populate_playlist_list(files) {
  let pl_select = document.getElementById("pl_list");
  pl_select.innerHTML = "<option disabled selected value> -- load playlist -- </option>";

  if (files) {
    const FILE_ROOT = Object.keys(files)[0];
    const type = "pl";
    if (FILE_ROOT && files[FILE_ROOT][type] && Object.keys(files[FILE_ROOT][type]).length > 0) { 
      Object.keys(files[FILE_ROOT][type]).forEach(id => {
        pl_select.insertAdjacentHTML("beforeend", `<option value="${FILE_ROOT}/${type}/${id}.json">${id}</option>`)
      });
    }
    else {
      console.log("No playlist files.");
    }
  }
}


async function populate_art_list(files) {
  if (files) {
    const FILE_ROOT = Object.keys(files)[0];
    if (FILE_ROOT) {
      let art_ul = document.getElementById("art_ul");
      art_ul.innerHTML = "";
      const types = [{"an":"animation"}, {"cm":"composite"}, {"im":"image"}, {"pl":"playlist"}];
      types.forEach(type_obj => {
        let type = Object.keys(type_obj)[0];
        if (files[FILE_ROOT][type] && Object.keys(files[FILE_ROOT][type]).length > 0) {
          let btns_div = document.getElementById(`${type}_btns`);
          Object.keys(files[FILE_ROOT][type]).forEach(id => {
            art_ul.insertAdjacentHTML("beforeend", `<li class="${type}" onclick="load_effect_into_dropzone('${type}', '${id}')">${type_obj[type].charAt(0).toUpperCase()}: ${id}</li>`);
            ul_playlist.style.minHeight = art_ul.offsetHeight;
          });
        }
        else {
          console.log(`No ${type_obj[type]} files.`);
        }
      });
    }
  }
}


function convert_to_object(file_list_string) {
  let output = {};
  if (file_list_string.length === 0 || !file_list_string.startsWith("ROOT:")) {
    return output;
  }
  
  // guard against return and newline being used to separate lines.
  file_list_lines = file_list_string.replaceAll(return_char + newline_char, newline_char).split(newline_char);
  let FILE_ROOT = file_list_lines.shift();
  FILE_ROOT = FILE_ROOT.slice(5);
  
  output[FILE_ROOT] = {};

  for (let i = 0; i < file_list_lines.length; i++) {
    if (file_list_lines[i].endsWith("/")) {
      const type = file_list_lines[i].slice(0, -1);
      output[FILE_ROOT][type] = {};
      continue;
    }
    const si = file_list_lines[i].indexOf("/");
    if (si == -1) {
      continue; // bad entry
    }
    const type = file_list_lines[i].substring(0, si);
    const id = file_list_lines[i].substring(si+1);
    output[FILE_ROOT][type][id] = 0;
  }
  return output;
}


async function populate(initial_load) {
  let files;
  try {
    let response = await fetch(`${base_url}/file_list`);
    if (!response.ok) {
      throw new Error("Error fetching /file_list");
    }

    // a lot of html and javascript was already written for processing json file lists but it was
    // decided that using a text file list would keep things simpler in the microcontroller code.
    // converting a text file list to an object, so it can be processed using code already written
    // for processing a json /file_list. this leaves option the option open for returning to a json
    // file list in the microcontroller code in the future.
    response_text = await response.text();
    files = convert_to_object(response_text);
    
    //files = await response.json();
    
    if (Object.keys(files).length === 0 && files.constructor === Object) {
      throw new Error("Error file list is empty.");
    }
    
  }
  catch(e) {
    console.error(e);
    files = null; // files = {}; if (files) is true so use null
    // this is not a fatal error. device can still operate normally without any files.
  }

  if (initial_load) {
    populate_art_list(files);
  }
  populate_playlist_list(files);
}


function run() {
  populate(true);
}

window.addEventListener("load", run);

</script>
</body>
</html>
