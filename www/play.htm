<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no" />
  <meta http-equiv="Cache-Control" content="private, no-store" />
  <title>Play</title>
  <style>
  html {
    touch-action: manipulation;
    overflow: auto;
  }

  body {
    font-family: Arial, sans-serif;
    color: #faffff;
    background: #111;
    font-size: 17px;
    text-align: center;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
  }
  
  #return_main_menu {
    float: left;
  }

  .grid-container {
    display: grid;
    grid-template-columns: repeat(4, minmax(20px, 1fr));
    grid-column-gap: 5px;
    width: 1000px;
    max-width: 95vw;
    justify-content: center;
    margin: 5px auto;
    padding: 5px;
  }

  .grid-container div {
    border: 1px solid #fff;
  }

  .im {
    background: #bb8888;
  }
  
  .cm {
    background: #88bb88;
  }

  .an {
    background: #88bbbb;
  }

  .pl {
    background: #8888bb;
  }

  input[type="button"] {
    margin: 5px auto;
    border: 0;
    border-radius: 0.3rem;
    color: #faffff;
    line-height: 2.4rem;
    font-size: 1.2rem;
    padding: 8px 0px;
    width: 100%;
    transition-duration: 0.4s;
    cursor: pointer;
  }
  input[type="button"]:hover {
    background: #0e70a4;
  }
/*
  button,
  input[type="button"] {
    margin: 5px auto;
    border: 0;
    border-radius: 0.3rem;
    color: #faffff;
    line-height: 2.4rem;
    font-size: 1.2rem;
    width: 100%;
    -webkit-transition-duration: 0.4s;
    transition-duration: 0.4s;
    cursor: pointer;
  }
  button:hover,
  input[type="button"]:hover {
    background: #0e70a4;
  }
*/

</style>
</head>
<body>
  <a id="return_main_menu" href="index.htm">
    <svg height="24px" width="24px" viewBox="0 0 16 16" id="Layer_1">
      <path fill="white" d="M15.45,7L14,5.551V2c0-0.55-0.45-1-1-1h-1c-0.55,0-1,0.45-1,1v0.553L9,0.555C8.727,0.297,8.477,0,8,0S7.273,0.297,7,0.555  L0.55,7C0.238,7.325,0,7.562,0,8c0,0.563,0.432,1,1,1h1v6c0,0.55,0.45,1,1,1h3v-5c0-0.55,0.45-1,1-1h2c0.55,0,1,0.45,1,1v5h3  c0.55,0,1-0.45,1-1V9h1c0.568,0,1-0.437,1-1C16,7.562,15.762,7.325,15.45,7z"/>
    </svg>
  </a>

  <h3>Display saved files on the LED matrix.</h3>

  <div class="grid-container">
    <div id="im_btns">
      <h4>Saved Images</h4>
    </div>
    <div id="cm_btns">
      <h4>Saved Composites</h4>
    </div>
    <div id="an_btns">
      <h4>Saved Animations</h4>
    </div>
    <div id="pl_btns">
      <h4>Saved Playlists</h4>
    </div>
  </div>

  <!--div id="main_button">
    <a href="./"><button name="">Main Menu</button></a>
  </div-->
<script>
// minifier code breaks code when some escape sequences (e.g. backslash n) are used
const newline_char = String.fromCharCode(10);
const return_char = String.fromCharCode(13);
//const tab_char = String.fromCharCode(9)

let base_url = "";
if (window.location.protocol == "file:") {
  // makes for easier debugging.
  // if html is loaded locally, can see the results of editing more easily.
  // otherwise every change to html would require uploading new version to microcontroller.
  base_url = "http://pixelart.local";
}


function convert_to_object(file_list_string) {
  let output = {};
  if (file_list_string.length === 0 || !file_list_string.startsWith("ROOT:")) {
    return output;
  }
  
  // guard against return and newline being used to separate lines.
  file_list_lines = file_list_string.replaceAll(return_char + newline_char, newline_char).split(newline_char);
  let FILE_ROOT = file_list_lines.shift();
  FILE_ROOT = FILE_ROOT.slice(5);
  
  output[FILE_ROOT] = {};

  for (let i = 0; i < file_list_lines.length; i++) {
    if (file_list_lines[i].endsWith("/")) {
      const type = file_list_lines[i].slice(0, -1);
      output[FILE_ROOT][type] = {};
      continue;
    }
    const si = file_list_lines[i].indexOf("/");
    if (si == -1) {
      continue; // bad entry
    }
    const type = file_list_lines[i].substring(0, si);
    const id = file_list_lines[i].substring(si+1);
    output[FILE_ROOT][type][id] = 0;
  }
  return output;
}


async function populate_art() {
  let files;
  try {
    let response = await fetch(`${base_url}/file_list`);
    if (!response.ok) {
      throw new Error("Error fetching /file_list");
    }

    // a lot of html and javascript was already written for processing json file lists but it was
    // decided that using a text file list would keep things simpler in the microcontroller code.
    // converting a text file list to an object, so it can be processed using code already written
    // for processing a json /file_list. this leaves option the option open for returning to a json
    // file list in the microcontroller code in the future.
    response_text = await response.text();
    files = convert_to_object(response_text);
    
    //files = await response.json();
    
    if (Object.keys(files).length === 0 && files.constructor === Object) {
      throw new Error("Error file list is empty.");
    }
    
  }
  catch(e) {
    console.error(e);
    files = null; // files = {}; if (files) is true so use null
    // this is not a fatal error. device can still operate normally without any files.
  }

  if (files) {
    const FILE_ROOT = Object.keys(files)[0];
    if (FILE_ROOT) {
      const types = [{"an":"animation"}, {"cm":"composite"}, {"im":"image"}, {"pl":"playlist"}];
      types.forEach(type_obj => {
        let type = Object.keys(type_obj)[0];
        console.log(type);
        if (files[FILE_ROOT][type] && Object.keys(files[FILE_ROOT][type]).length > 0) {
          let btns_div = document.getElementById(`${type}_btns`);
          Object.keys(files[FILE_ROOT][type]).forEach(id => {
            btns_div.insertAdjacentHTML("beforeend", `<input type="button" id="${id}" class="btn ${type}" data-type="${type}" value="${id}" onclick="load('${type}', '${id}')">`)
          });
        }
        else {
          console.log(`No ${type_obj[type]} files.`);
        }
      });
    }
  }
}


async function load(type, id) {
  try {
    const response = await fetch(base_url+"/load", {
      method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        },
        body: `t=${type}&id=${id}`
    });
    if (!response.ok) {
      throw new Error("Error POSTing to /load");
    }
  }
  catch(e) {
    console.error(e);
    return;
  }

}

window.addEventListener("load", populate_art);

</script>
</body>
</html>
