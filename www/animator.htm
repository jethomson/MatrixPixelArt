<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no" />
  <meta http-equiv="Cache-Control" content="private, no-store" />
  <title>Animator</title>
  <style>
  html {
    touch-action: manipulation
    overflow: auto;
  }

  body {
    font-family: Arial, sans-serif;
    color: #faffff;
    background: #111;
    font-size: 17px;
    text-align: center;
    -webkit-touch-callout: none;
    -webkit-tap-highlight-color: transparent;
  }

  #return_main_menu {
    float: left;
  }
  
  #main_div {
    max-width: 1400px;
    margin: auto;
  }

  .grid-container {
    display: grid;
    grid-template-columns: repeat(3, minmax(20px, 120px)); /*fixes select element overflow grid width problem in chrome*/
    grid-column-gap: 2vw;
    grid-auto-rows: 1fr;
    grid-row-gap: 5px;
    width: 1000px;
    max-width: 95vw;
    justify-content: center;
    margin: 5px auto;
    padding: 5px;
    border-style: solid;
  }

  .item-a {
    grid-column-start: 1;
  }
  /* this allows children element of section to be displayed as if they were direct children of the div grid */
  section {
    display: contents;
  }

  #button-container {
    display: flex;
    padding-bottom: 10px;
    padding-top: 10px;
    max-width: 600px;
    margin: 5px auto;
  }
  .buttonclass {
    flex:1;
    padding-top:5px;
    padding-bottom:5px;
  }

  input#anid{
    flex-grow: 1;
    padding-top: 5px;
    padding-bottom: 5px;
    background: #222;
    border: 1px solid #333;
    padding-inline: 5px;
    max-width: 225px;
    border-radius: 7px;
    font-family: Arial,sans-serif;
    font-size: 15px;
    color: #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .gap {
    width:10px;
  }

  button {
    background: #222;
    border: 1px solid #333;
    padding-inline: 5px;
    width: 100%;
    border-radius: 24px;
    font-family: Arial, sans-serif;
    font-size: 1em;
    color: #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor:pointer;
  }
  /*
  button:hover,
  input[type="button"]:hover {
    background: #0e70a4;
  }
  */

  .buttonclass {
    flex: 1;
    padding-top: 5px;
    padding-bottom: 5px;
  }

  .svg-icon {
    vertical-align: middle;
  }

  .header {
    text-align: center;
  }

  input[type="number"] {
    color: #faffff;
    background: #333;
    border: 0 solid #fff;
    border-radius: 0.3rem;
    margin: 0px 6px;
    font-size: 19px;
    transition: background-color .2s;
    outline: 0;
    -webkit-appearance: textfield;
    -moz-appearance: textfield;
    appearance: textfield
  }

  </style>
</head>
<body>
  <a id="return_main_menu" href="./index.htm"><svg height="24px" width="24px" viewBox="0 0 16 16" id="Layer_1" version="1.1" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path fill="white" d="M15.45,7L14,5.551V2c0-0.55-0.45-1-1-1h-1c-0.55,0-1,0.45-1,1v0.553L9,0.555C8.727,0.297,8.477,0,8,0S7.273,0.297,7,0.555  L0.55,7C0.238,7.325,0,7.562,0,8c0,0.563,0.432,1,1,1h1v6c0,0.55,0.45,1,1,1h3v-5c0-0.55,0.45-1,1-1h2c0.55,0,1,0.45,1,1v5h3  c0.55,0,1-0.45,1-1V9h1c0.568,0,1-0.437,1-1C16,7.562,15.762,7.325,15.45,7z"/></svg></a>
  <h3>Display images one at a time for specific durations to create animations.</h3>

  <div id="main_div">
    <div id="button-container">
      <input type="text" id="anid" maxlength=26 placeholder="Enter filename here." value="" autocomplete="off" />
      <div id="gap1" class="gap"></div>
      <button id="btn_save" class="buttonclass" onclick="save()"><svg class="svg-icon" style="width:36px;height:36px" viewBox="0 0 24 24"> <path id="sendSvgP" fill="currentColor" d="M6.5 20Q4.22 20 2.61 18.43 1 16.85 1 14.58 1 12.63 2.17 11.1 3.35 9.57 5.25 9.15 5.88 6.85 7.75 5.43 9.63 4 12 4 14.93 4 16.96 6.04 19 8.07 19 11 20.73 11.2 21.86 12.5 23 13.78 23 15.5 23 17.38 21.69 18.69 20.38 20 18.5 20H13Q12.18 20 11.59 19.41 11 18.83 11 18V12.85L9.4 14.4L8 13L12 9L16 13L14.6 14.4L13 12.85V18H18.5Q19.55 18 20.27 17.27 21 16.55 21 15.5 21 14.45 20.27 13.73 19.55 13 18.5 13H17V11Q17 8.93 15.54 7.46 14.08 6 12 6 9.93 6 8.46 7.46 7 8.93 7 11H6.5Q5.05 11 4.03 12.03 3 13.05 3 14.5 3 15.95 4.03 17 5.05 18 6.5 18H9V20M12 13Z"></path> </svg>&nbsp; Save</button>
    </div>
    <div id="layer_container" class="grid-container">
        <section>
            <label class="item-a">Frame #</label>
            <label>Image</label>
            <label>Duration (seconds)</label>
        </section>
    </div>
    <!--div id="main_button" class="grid-item">
      <a href="./"><button name="">Main Menu</button></a>
    </div-->
  </div>

<script src="js/template_variables.js"></script>
<script>
base_url = "";
if (window.location.protocol == "file:") {
  // makes for easier debugging.
  // if html is loaded locally, can see the results of editing more easily.
  // otherwise every change to html would require uploading new version to microcontroller.
  base_url = "http://pixelart.local";
}

function enable_disable_settings(el_select) {
  let opt = el_select.options[el_select.selectedIndex];
  let type = "e"; // need to set to e in order to disable all settings when empty layer is chosen.
  if (opt.parentElement.tagName === "OPTGROUP") {
    type = opt.parentElement.id;
  }

  let id = el_select.id;
  let els = document.querySelectorAll(`[id^="${id}"][data-setting-for]`);
  for (el of els) {
    let dnew = true;
    let enabled_for_types = el.getAttribute("data-setting-for").split(",");
    if (enabled_for_types.includes(type)) {
      dnew = false;
      //if (el.getAttribute("data-key") == "d") {
      if (el.type == "number") {
        el.value = "0.10";
      }
    }
    else {
      // set to defaults - maybe should create a function for this that can be called on page load
      if (el.type == "number") {
        el.value = "0";
      }
    }
    el.disabled = dnew;
  }
}


function populate_effects(list) {
  let files = list["files"];
  if (files) {
    let el_selects = document.querySelectorAll('select[data-key="id"]');
    for (el_select of el_selects) {
      el_select.insertAdjacentHTML("beforeend", '<optgroup id="im" label="Images">');
    }

    for (let i = 0; i < files.length; i++) {
      let type = files[i]["t"];
      let id = files[i]["id"];
      if (type === "im" && id) { 
        let el_optgroups = document.querySelectorAll('optgroup[id="im"]');
        for (el_optgroup of el_optgroups) {
          el_optgroup.insertAdjacentHTML("beforeend", `<option value="${id}">${id}</option>`);
        }
      }
    }
  }
}


async function save() {
  let comp_dict = {};
  let type = "an";
  let anid = encodeURIComponent(document.getElementById("anid").value);

  comp_dict["t"] = type;
  comp_dict["l"] = [];

  if (anid) {
    let layers = document.querySelectorAll("section[data-layer]");
    for (let i = layers.length-1; i >= 0; i--) {
      let layer = layers[i];
      let el_keys = layer.querySelectorAll("[data-key]");
      let ltype = "e";
      let lobj = {};
      lobj["t"] = ltype; // default: e indicates the layer is empty
      let save_color = false;
      for (let j = 0; j < el_keys.length; j++) {
        let el_key = el_keys[j];

        let key = el_key.getAttribute("data-key");
        let value;
        if (key === "id") {
          let opt = el_key.options[el_key.selectedIndex];
          if (opt.parentElement.tagName === "OPTGROUP") {
            ltype = opt.parentElement.id;
          }
          if (ltype !== "e") {
            value = opt.value;
          }
        }

        if (key === "d") {
          if (ltype !== "e") {
            value = el_key.value;
            if (isNaN(value) || value < 0.050) {
              value = 0.050;
            }
          }
        }

        //stringify() wraps numbers in quotes so wrap numbers in !! to make it easy to remove the quotes.
        //any number that you want to represented as a number in json should have the value set above here. 
        if (value && !isNaN(value)) {
          value = "!!"+(1000*value)+"!!";
        }

        if (value) {
          lobj[key] = value;
        }
      }
      lobj["t"] = ltype;
      comp_dict["l"].push(lobj);
    }
    let json = JSON.stringify(comp_dict);
    const regex = /"!!(-?[0-9]+\.{0,1}[0-9]*)!!"/g 
    json = json.replace(regex, '$1')

    console.log(`t=${type}&id=${anid}&json=` + json);

    let success = false;
    try {
      const t = await fetch(base_url+"/save", {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        },
        body: `t=${type}&id=${anid}&json=` + json
      }),
      reply = await t.json();
      console.log(reply);
      success = true;
    }
    catch(e) {
      console.error(e);
      success = false;
    }

    let sb = document.getElementById("sendSvgP");
    if (success) {
      sb.setAttribute("fill", "#056b0a");
      setTimeout(function(){sb.setAttribute("fill", "#eee")}, 1000);
    }
    else {
      sb.setAttribute("fill", "#6b050c");
      setTimeout(function(){sb.setAttribute("fill", "#777")}, 1000);
    }
  }
}


async function fetch_options() {
  const t = await fetch(base_url+"/options.json");
  let reply = await t.json();
  //let reply = JSON.parse('{"files":[{"type":"file","path":"/files/im/blinky.json","name":"blinky"},{"type":"file","path":"/files/im/inky.json","name":"inky"},{"type":"file","path":"/files/im/pinky.json","name":"pinky"},{"type":"file","path":"/files/im/clyde.json","name":"clyde"}],"patterns":[{"id":0,"name":"Rainbow"},{"id":1,"name":"Solid"},{"id":2,"name":"Riffle"},{"id":3,"name":"Puck-Man"}],"accents":[{"id":0,"name":"None"},{"id":1,"name":"Breathing"},{"id":2,"name":"Flicker"},{"id":3,"name":"Frozen Decay"}]}');
  populate_effects(reply);
}


function create_layers_ui() {
  let num_layers;
  // t_num_layers is defined in a separate file so it can be run through the webserver's template processor
  // gzipped html cannot be run through the template processor, so it is necessary for t_num_layers to be separate
  if (t_num_layers.replaceAll("~", "") === "NUM_LAYERS") {
    t_num_layers = "6";
  }
  num_layers = parseInt(t_num_layers);
  let layer_container = document.getElementById("layer_container");
  while (num_layers) {
    num_layers--;
    let layer = `
<section data-layer="l${num_layers}">
    <label class="item-a">${num_layers}</label>
    <select id="l${num_layers}" data-key="id" onchange="enable_disable_settings(this)">
      <option value="0">Empty</option>
    </select>
    <input id="l${num_layers}d" data-setting-for="im" data-key="d" title="seconds" type="number" onfocusout="(function(e){e.reportValidity();})(this);" min="0.10" step="0.05" value="0" disabled />
    </select>
</section>`;
    layer_container.insertAdjacentHTML("beforeend", layer);
  }
}

function run() {
  create_layers_ui();
  fetch_options();
}

window.addEventListener("load", run);

</script>

</body>
</html>
